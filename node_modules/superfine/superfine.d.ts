export type VNode = {
  tag: string
  props:Object,
  key?:string,
  children:(VNode|VNode[]),
  type:number,
  node:Node,
}    

declare abstract class TagName<T> {
  tag: T;

  constructor() {
      this.tag = this.getInitialValue();
  }

  protected abstract getInitialValue(): T;
}

export class ButtonTag extends TagName<string> {
  protected getInitialValue(): string {
      return 'button';
  }
}

export type GlobalAttributes = {
  accesskey: string,
  autocapitalize: string,
  class: string,
  contenteditable: string,
  contextmenu: string,
  dir: string,
  draggable: string,
  enterkeyhint: string,
  hidden: string,
  id: string,
  inputmode: string,
  is: string,
  itemid: string,
  itemprop: string,
  itemref: string,
  itemscope: string,
  itemtype: string,
  lang: string,
  nonce: string,
  part: string,
  slot: string,
  spellcheck: string,
  style: string,
  tabindex: string,
  title: string,
  translate: string,
}

export type GlobalProps = GlobalEventHandlers & GlobalAttributes;
 
export type ButtonAttributes = {
  autofocus: string,
  autocomplete: string,
  disabled: string,
  form: string,
  formaction: string,
  formenctype: string,
  formmethod: string,
  formnovalidate: string,
  formtarget: string,
  name: string,
  type: string,
  value: string
}

export function text (value:string, node?:Node):VNode
export function h (tag: keyof HTMLElementTagNameMap, props:Partial<GlobalProps> , children:(VNode|VNode[])):VNode
export function h (tag: ButtonTag, props: Partial<GlobalProps & ButtonAttributes>, children:(VNode|VNode[])):VNode
export function patch (node:Node, vdom:VNode):Node
